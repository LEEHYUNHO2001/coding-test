// [0, 6, 7, 0]
// [0, 1, 8, 0]
// 이렇게 위에서 제일 큰 수를 선택해도,
// 다음 행에서 작아질 수 있음

// 같은 행만 사용하는 것 같지만,
// 현재 행 기준으로 누적된 행에서
// 현재 행 인덱스를 제외한 max를 더하기 때문에
// 같은 행만 사용하는것이 아님 (그림 그려보면 이해 쉬움)
function solution(land) {
  return Math.max(
    ...land.reduce(
      (a, c) => {
        return [
          c[0] + Math.max(a[1], a[2], a[3]),
          c[1] + Math.max(a[0], a[2], a[3]),
          c[2] + Math.max(a[0], a[1], a[3]),
          c[3] + Math.max(a[0], a[1], a[2]),
        ];
      },
      [0, 0, 0, 0]
    )
  );
}
